//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TsePublicService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://tsetmc.com/", ConfigurationName="TsePublicService.TsePublicV2Soap")]
    public interface TsePublicV2Soap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/ClientType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ClientTypeResponseClientTypeResult> ClientTypeAsync(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/Auction", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.AuctionResponseAuctionResult> AuctionAsync(string UserName, string Password, long from);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/Board", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> BoardAsync(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/Sector", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> SectorAsync(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/SubSector", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> SubSectorAsync(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/TradeLastDay", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> TradeLastDayAsync(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/TradeOneDay", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> TradeOneDayAsync(string UserName, string Password, int SelDate, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/TradeOneDayAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> TradeOneDayAllAsync(string UserName, string Password, int SelDate, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/InstTrade", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> InstTradeAsync(string UserName, string Password, long Inscode, int DateFrom, int DateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/MarketActivityDaily", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> MarketActivityDailyAsync(string UserName, string Password, int DateFrom, int DateTo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/BestLimitsAllIns", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> BestLimitsAllInsAsync(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/BestLimitOneIns", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> BestLimitOneInsAsync(string UserName, string Password, long InsCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/InstWithBestLimit", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> InstWithBestLimitAsync(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/Instrument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> InstrumentAsync(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/InstrumentFilterByDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> InstrumentFilterByDateAsync(string UserName, string Password, int DEven, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/Company", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> CompanyAsync(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/InstrumentsState", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> InstrumentsStateAsync(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/InstrumentsStateChange", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> InstrumentsStateChangeAsync(string UserName, string Password, int DEven, long Inscode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/IndexB1LastDayLastData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> IndexB1LastDayLastDataAsync(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/IndexB1LastDayOneInst", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> IndexB1LastDayOneInstAsync(string UserName, string Password, long IdxCode, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/IndexB2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> IndexB2Async(string UserName, string Password, int DEven);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/IndexInstrument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> IndexInstrumentAsync(string UserName, string Password, long IdxCode, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/InstAffect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> InstAffectAsync(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/InstAffectByFlow", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> InstAffectByFlowAsync(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/TOP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> TOPAsync(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/Msg", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> MsgAsync(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/StaticThresholds", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> StaticThresholdsAsync(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/MarketValue", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<decimal> MarketValueAsync(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/MarketValueByDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<decimal> MarketValueByDateAsync(string UserName, string Password, int DEven);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/FutureInformation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.FutureInformationResponseFutureInformationResult> FutureInformationAsync(string UserName, string Password, int DEven);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/AdjPrice", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> AdjPriceAsync(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/ShareChange", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> ShareChangeAsync(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/MarketActivityLast", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> MarketActivityLastAsync(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/SectorState", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> SectorStateAsync(string UserName, string Password, int DEven);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/NSCStart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> NSCStartAsync(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/PowerInstrument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> PowerInstrumentAsync(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/PowerInstrumentHistory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> PowerInstrumentHistoryAsync(string UserName, string Password, long From);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/EnergyFuture", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> EnergyFutureAsync(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/EnergyFutureCurrency", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> EnergyFutureCurrencyAsync(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/EnergyFutureCurrencyRate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> EnergyFutureCurrencyRateAsync(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/EnergyFutureMOP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> EnergyFutureMOPAsync(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/TradeLastDayAll", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> TradeLastDayAllAsync(string UserName, string Password, byte Flow);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/Option", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> OptionAsync(string UserName, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/ClientTypeByDate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ClientTypeByDateResponseClientTypeByDateResult> ClientTypeByDateAsync(string UserName, string Password, int Date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/ClientTypeByInsCode", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.ClientTypeByInsCodeResponseClientTypeByInsCodeResult> ClientTypeByInsCodeAsync(string UserName, string Password, long InsCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tsetmc.com/AdjPrceAllByCIsin", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TsePublicService.AdjPrceAllByCIsinResponseAdjPrceAllByCIsinResult> AdjPrceAllByCIsinAsync(string UserName, string Password, string CIsin);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://tsetmc.com/")]
    public partial class ClientTypeResponseClientTypeResult
    {
        
        private System.Xml.XmlElement[] anyField;
        
        private System.Xml.XmlElement any1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="http://www.w3.org/2001/XMLSchema", Order=0)]
        public System.Xml.XmlElement[] Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="urn:schemas-microsoft-com:xml-diffgram-v1", Order=1)]
        public System.Xml.XmlElement Any1
        {
            get
            {
                return this.any1Field;
            }
            set
            {
                this.any1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://tsetmc.com/")]
    public partial class AuctionResponseAuctionResult
    {
        
        private System.Xml.XmlElement[] anyField;
        
        private System.Xml.XmlElement any1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="http://www.w3.org/2001/XMLSchema", Order=0)]
        public System.Xml.XmlElement[] Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="urn:schemas-microsoft-com:xml-diffgram-v1", Order=1)]
        public System.Xml.XmlElement Any1
        {
            get
            {
                return this.any1Field;
            }
            set
            {
                this.any1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://tsetmc.com/")]
    public partial class FutureInformationResponseFutureInformationResult
    {
        
        private System.Xml.XmlElement[] anyField;
        
        private System.Xml.XmlElement any1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="http://www.w3.org/2001/XMLSchema", Order=0)]
        public System.Xml.XmlElement[] Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="urn:schemas-microsoft-com:xml-diffgram-v1", Order=1)]
        public System.Xml.XmlElement Any1
        {
            get
            {
                return this.any1Field;
            }
            set
            {
                this.any1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://tsetmc.com/")]
    public partial class ClientTypeByDateResponseClientTypeByDateResult
    {
        
        private System.Xml.XmlElement[] anyField;
        
        private System.Xml.XmlElement any1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="http://www.w3.org/2001/XMLSchema", Order=0)]
        public System.Xml.XmlElement[] Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="urn:schemas-microsoft-com:xml-diffgram-v1", Order=1)]
        public System.Xml.XmlElement Any1
        {
            get
            {
                return this.any1Field;
            }
            set
            {
                this.any1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://tsetmc.com/")]
    public partial class ClientTypeByInsCodeResponseClientTypeByInsCodeResult
    {
        
        private System.Xml.XmlElement[] anyField;
        
        private System.Xml.XmlElement any1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="http://www.w3.org/2001/XMLSchema", Order=0)]
        public System.Xml.XmlElement[] Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="urn:schemas-microsoft-com:xml-diffgram-v1", Order=1)]
        public System.Xml.XmlElement Any1
        {
            get
            {
                return this.any1Field;
            }
            set
            {
                this.any1Field = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://tsetmc.com/")]
    public partial class AdjPrceAllByCIsinResponseAdjPrceAllByCIsinResult
    {
        
        private System.Xml.XmlElement[] anyField;
        
        private System.Xml.XmlElement any1Field;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="http://www.w3.org/2001/XMLSchema", Order=0)]
        public System.Xml.XmlElement[] Any
        {
            get
            {
                return this.anyField;
            }
            set
            {
                this.anyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyElementAttribute(Namespace="urn:schemas-microsoft-com:xml-diffgram-v1", Order=1)]
        public System.Xml.XmlElement Any1
        {
            get
            {
                return this.any1Field;
            }
            set
            {
                this.any1Field = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface TsePublicV2SoapChannel : TsePublicService.TsePublicV2Soap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class TsePublicV2SoapClient : System.ServiceModel.ClientBase<TsePublicService.TsePublicV2Soap>, TsePublicService.TsePublicV2Soap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public TsePublicV2SoapClient(EndpointConfiguration endpointConfiguration) : 
                base(TsePublicV2SoapClient.GetBindingForEndpoint(endpointConfiguration), TsePublicV2SoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TsePublicV2SoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(TsePublicV2SoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TsePublicV2SoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(TsePublicV2SoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public TsePublicV2SoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }

        public TsePublicV2SoapClient()
        {
        }

        public System.Threading.Tasks.Task<TsePublicService.ClientTypeResponseClientTypeResult> ClientTypeAsync(string UserName, string Password)
        {
            return base.Channel.ClientTypeAsync(UserName, Password);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.AuctionResponseAuctionResult> AuctionAsync(string UserName, string Password, long from)
        {
            return base.Channel.AuctionAsync(UserName, Password, from);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> BoardAsync(string UserName, string Password)
        {
            return base.Channel.BoardAsync(UserName, Password);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> SectorAsync(string UserName, string Password)
        {
            return base.Channel.SectorAsync(UserName, Password);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> SubSectorAsync(string UserName, string Password)
        {
            return base.Channel.SubSectorAsync(UserName, Password);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> TradeLastDayAsync(string UserName, string Password, byte Flow)
        {
            return base.Channel.TradeLastDayAsync(UserName, Password, Flow);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> TradeOneDayAsync(string UserName, string Password, int SelDate, byte Flow)
        {
            return base.Channel.TradeOneDayAsync(UserName, Password, SelDate, Flow);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> TradeOneDayAllAsync(string UserName, string Password, int SelDate, byte Flow)
        {
            return base.Channel.TradeOneDayAllAsync(UserName, Password, SelDate, Flow);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> InstTradeAsync(string UserName, string Password, long Inscode, int DateFrom, int DateTo)
        {
            return base.Channel.InstTradeAsync(UserName, Password, Inscode, DateFrom, DateTo);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> MarketActivityDailyAsync(string UserName, string Password, int DateFrom, int DateTo)
        {
            return base.Channel.MarketActivityDailyAsync(UserName, Password, DateFrom, DateTo);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> BestLimitsAllInsAsync(string UserName, string Password, byte Flow)
        {
            return base.Channel.BestLimitsAllInsAsync(UserName, Password, Flow);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> BestLimitOneInsAsync(string UserName, string Password, long InsCode)
        {
            return base.Channel.BestLimitOneInsAsync(UserName, Password, InsCode);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> InstWithBestLimitAsync(string UserName, string Password, byte Flow)
        {
            return base.Channel.InstWithBestLimitAsync(UserName, Password, Flow);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> InstrumentAsync(string UserName, string Password, byte Flow)
        {
            return base.Channel.InstrumentAsync(UserName, Password, Flow);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> InstrumentFilterByDateAsync(string UserName, string Password, int DEven, byte Flow)
        {
            return base.Channel.InstrumentFilterByDateAsync(UserName, Password, DEven, Flow);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> CompanyAsync(string UserName, string Password, byte Flow)
        {
            return base.Channel.CompanyAsync(UserName, Password, Flow);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> InstrumentsStateAsync(string UserName, string Password, byte Flow)
        {
            return base.Channel.InstrumentsStateAsync(UserName, Password, Flow);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> InstrumentsStateChangeAsync(string UserName, string Password, int DEven, long Inscode)
        {
            return base.Channel.InstrumentsStateChangeAsync(UserName, Password, DEven, Inscode);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> IndexB1LastDayLastDataAsync(string UserName, string Password, byte Flow)
        {
            return base.Channel.IndexB1LastDayLastDataAsync(UserName, Password, Flow);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> IndexB1LastDayOneInstAsync(string UserName, string Password, long IdxCode, byte Flow)
        {
            return base.Channel.IndexB1LastDayOneInstAsync(UserName, Password, IdxCode, Flow);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> IndexB2Async(string UserName, string Password, int DEven)
        {
            return base.Channel.IndexB2Async(UserName, Password, DEven);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> IndexInstrumentAsync(string UserName, string Password, long IdxCode, byte Flow)
        {
            return base.Channel.IndexInstrumentAsync(UserName, Password, IdxCode, Flow);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> InstAffectAsync(string UserName, string Password)
        {
            return base.Channel.InstAffectAsync(UserName, Password);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> InstAffectByFlowAsync(string UserName, string Password, byte Flow)
        {
            return base.Channel.InstAffectByFlowAsync(UserName, Password, Flow);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> TOPAsync(string UserName, string Password, byte Flow)
        {
            return base.Channel.TOPAsync(UserName, Password, Flow);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> MsgAsync(string UserName, string Password)
        {
            return base.Channel.MsgAsync(UserName, Password);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> StaticThresholdsAsync(string UserName, string Password, byte Flow)
        {
            return base.Channel.StaticThresholdsAsync(UserName, Password, Flow);
        }
        
        public System.Threading.Tasks.Task<decimal> MarketValueAsync(string UserName, string Password)
        {
            return base.Channel.MarketValueAsync(UserName, Password);
        }
        
        public System.Threading.Tasks.Task<decimal> MarketValueByDateAsync(string UserName, string Password, int DEven)
        {
            return base.Channel.MarketValueByDateAsync(UserName, Password, DEven);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.FutureInformationResponseFutureInformationResult> FutureInformationAsync(string UserName, string Password, int DEven)
        {
            return base.Channel.FutureInformationAsync(UserName, Password, DEven);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> AdjPriceAsync(string UserName, string Password, byte Flow)
        {
            return base.Channel.AdjPriceAsync(UserName, Password, Flow);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> ShareChangeAsync(string UserName, string Password, byte Flow)
        {
            return base.Channel.ShareChangeAsync(UserName, Password, Flow);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> MarketActivityLastAsync(string UserName, string Password, byte Flow)
        {
            return base.Channel.MarketActivityLastAsync(UserName, Password, Flow);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> SectorStateAsync(string UserName, string Password, int DEven)
        {
            return base.Channel.SectorStateAsync(UserName, Password, DEven);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> NSCStartAsync(string UserName, string Password)
        {
            return base.Channel.NSCStartAsync(UserName, Password);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> PowerInstrumentAsync(string UserName, string Password)
        {
            return base.Channel.PowerInstrumentAsync(UserName, Password);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> PowerInstrumentHistoryAsync(string UserName, string Password, long From)
        {
            return base.Channel.PowerInstrumentHistoryAsync(UserName, Password, From);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> EnergyFutureAsync(string UserName, string Password)
        {
            return base.Channel.EnergyFutureAsync(UserName, Password);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> EnergyFutureCurrencyAsync(string UserName, string Password)
        {
            return base.Channel.EnergyFutureCurrencyAsync(UserName, Password);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> EnergyFutureCurrencyRateAsync(string UserName, string Password)
        {
            return base.Channel.EnergyFutureCurrencyRateAsync(UserName, Password);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> EnergyFutureMOPAsync(string UserName, string Password)
        {
            return base.Channel.EnergyFutureMOPAsync(UserName, Password);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> TradeLastDayAllAsync(string UserName, string Password, byte Flow)
        {
            return base.Channel.TradeLastDayAllAsync(UserName, Password, Flow);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ArrayOfXElement> OptionAsync(string UserName, string Password)
        {
            return base.Channel.OptionAsync(UserName, Password);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ClientTypeByDateResponseClientTypeByDateResult> ClientTypeByDateAsync(string UserName, string Password, int Date)
        {
            return base.Channel.ClientTypeByDateAsync(UserName, Password, Date);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.ClientTypeByInsCodeResponseClientTypeByInsCodeResult> ClientTypeByInsCodeAsync(string UserName, string Password, long InsCode)
        {
            return base.Channel.ClientTypeByInsCodeAsync(UserName, Password, InsCode);
        }
        
        public System.Threading.Tasks.Task<TsePublicService.AdjPrceAllByCIsinResponseAdjPrceAllByCIsinResult> AdjPrceAllByCIsinAsync(string UserName, string Password, string CIsin)
        {
            return base.Channel.AdjPrceAllByCIsinAsync(UserName, Password, CIsin);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.TsePublicV2Soap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.TsePublicV2Soap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpTransportBindingElement httpBindingElement = new System.ServiceModel.Channels.HttpTransportBindingElement();
                httpBindingElement.AllowCookies = true;
                httpBindingElement.MaxBufferSize = int.MaxValue;
                httpBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.TsePublicV2Soap))
            {
                return new System.ServiceModel.EndpointAddress("http://service.tsetmc.com/WebService/TsePublicV2.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.TsePublicV2Soap12))
            {
                return new System.ServiceModel.EndpointAddress("http://service.tsetmc.com/WebService/TsePublicV2.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            TsePublicV2Soap,
            
            TsePublicV2Soap12,
        }
    }
    
    [System.Xml.Serialization.XmlSchemaProviderAttribute(null, IsAny=true)]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil-lib", "2.0.3.0")]
    public partial class ArrayOfXElement : object, System.Xml.Serialization.IXmlSerializable
    {
        
        private System.Collections.Generic.List<System.Xml.Linq.XElement> nodesList = new System.Collections.Generic.List<System.Xml.Linq.XElement>();
        
        public ArrayOfXElement()
        {
        }
        
        public virtual System.Collections.Generic.List<System.Xml.Linq.XElement> Nodes
        {
            get
            {
                return this.nodesList;
            }
        }
        
        public virtual System.Xml.Schema.XmlSchema GetSchema()
        {
            throw new System.NotImplementedException();
        }
        
        public virtual void WriteXml(System.Xml.XmlWriter writer)
        {
            System.Collections.Generic.IEnumerator<System.Xml.Linq.XElement> e = nodesList.GetEnumerator();
            for (
            ; e.MoveNext(); 
            )
            {
                ((System.Xml.Serialization.IXmlSerializable)(e.Current)).WriteXml(writer);
            }
        }
        
        public virtual void ReadXml(System.Xml.XmlReader reader)
        {
            for (
            ; (reader.NodeType != System.Xml.XmlNodeType.EndElement); 
            )
            {
                if ((reader.NodeType == System.Xml.XmlNodeType.Element))
                {
                    System.Xml.Linq.XElement elem = new System.Xml.Linq.XElement("default");
                    ((System.Xml.Serialization.IXmlSerializable)(elem)).ReadXml(reader);
                    Nodes.Add(elem);
                }
                else
                {
                    reader.Skip();
                }
            }
        }
    }
}
